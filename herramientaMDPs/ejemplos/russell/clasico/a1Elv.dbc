data-base base_nodos{

number-of-cases = 206;

// Network Variables

// x
node x (finite-states){
kind-of-node = chance;
type-of-variable = finite-states;
num-states = 4;
states = (S0 S1 S2 S3);
}

// y
node y (finite-states){
kind-of-node = chance;
type-of-variable = finite-states;
num-states = 3;
states = (S0 S1 S2);
}

// x_prime
node x_prime (finite-states){
kind-of-node = chance;
type-of-variable = finite-states;
num-states = 4;
states = (S0 S1 S2 S3);
}

// y_prime
node y_prime (finite-states){
kind-of-node = chance;
type-of-variable = finite-states;
num-states = 3;
states = (S0 S1 S2);
}

relation {

memory = true;

cases = (

[S1,S0,S0,S0]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S1,S1,S0,S1]
[S3,S0,S2,S0]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S1,S1,S0,S1]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S3,S1,S2,S1]
[S3,S2,S2,S2]
[S3,S1,S2,S1]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S2,S2,S1,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S3,S1,S2,S1]
[S3,S0,S2,S0]
[S2,S2,S1,S2]
[S2,S2,S1,S2]
[S1,S1,S0,S1]
[S1,S0,S0,S0]
[S2,S1,S1,S1]
[S2,S2,S1,S2]
[S2,S2,S1,S2]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S1,S1,S0,S1]
[S2,S1,S1,S1]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S1,S1,S0,S1]
[S2,S2,S1,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S1,S1,S0,S1]
[S1,S1,S0,S1]
[S1,S1,S0,S1]
[S2,S2,S1,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S1,S0,S1]
[S2,S0,S1,S0]
[S2,S1,S1,S1]
[S3,S0,S2,S0]
[S3,S1,S2,S1]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S1,S2,S1]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S3,S2,S2,S2]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S0,S0,S0]
[S1,S1,S0,S1]
[S1,S0,S0,S0]
[S1,S0,S0,S0]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S3,S0,S2,S0]
[S2,S1,S1,S1]
[S1,S0,S0,S0]
[S1,S0,S0,S0]
[S2,S1,S1,S1]
[S1,S1,S0,S1]
[S1,S0,S0,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S1,S0,S0,S0]
[S1,S0,S0,S0]
[S1,S2,S0,S2]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S2,S1,S1,S1]
[S1,S0,S0,S0]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S1,S1,S1]
[S3,S2,S2,S2]
[S2,S0,S1,S0]
[S3,S2,S2,S2]
[S2,S0,S1,S0]
[S2,S2,S1,S2]
[S2,S1,S1,S1]
[S1,S1,S0,S1]
[S1,S1,S0,S1]
[S1,S1,S0,S1]
[S1,S2,S0,S2]
[S2,S0,S1,S0]
[S2,S0,S1,S0]
[S2,S0,S1,S0]
[S3,S1,S2,S1]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S2,S2,S1,S2]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S2,S0,S1,S0]
[S2,S1,S1,S1]
[S2,S1,S1,S1]
[S2,S1,S1,S1]
[S2,S1,S1,S1]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S3,S1,S2,S1]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S0,S0,S0]
[S3,S0,S2,S0]
[S3,S0,S2,S0]
[S2,S0,S1,S0]
[S2,S0,S1,S0]
[S1,S0,S0,S0]
[S3,S2,S2,S2]
[S2,S1,S1,S1]
[S3,S2,S2,S2]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S2,S1,S1,S1]
[S2,S1,S1,S1]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S2,S1,S1,S1]
[S2,S1,S1,S1]
[S1,S0,S0,S0]
[S1,S0,S0,S0]
[S3,S1,S2,S1]
[S3,S2,S2,S2]
[S2,S2,S1,S2]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S3,S0,S2,S0]
[S3,S2,S2,S2]
[S3,S1,S2,S1]
[S3,S1,S2,S1]
[S3,S2,S2,S2]
[S3,S0,S2,S0]
[S3,S1,S2,S1]
[S2,S1,S1,S1]
[S2,S2,S1,S2]
[S2,S2,S1,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S2,S1,S1,S1]
[S1,S1,S0,S1]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
[S1,S2,S0,S2]
);
}
}